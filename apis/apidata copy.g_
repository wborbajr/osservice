package apis

import (
	"encoding/json"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/wborbajr/osservice/config"
	"github.com/wborbajr/osservice/models"
	_struct "github.com/wborbajr/osservice/struct"
)

// https://stackoverflow.com/questions/27795036/create-chan-for-func-with-two-return-args#27795117

func GetOS(w http.ResponseWriter, r *http.Request) {

	w.Header().Set("Content-Type", "application/json")

	params := mux.Vars(r)

	doc := params["doc"]
	os := params["os"]

	// var waitGroup sync.WaitGroup

	IsiData := make(chan []_struct.StructData)
	errchan := make(chan error)

	dbara, errara := config.Konnekt_ara()
	// dbcwb, errcwb := config.Konnekt_cwb()
	// dblon, errlon := config.Konnekt_lon()
	// dbnat, errnat := config.Konnekt_nat()
	// dbrec, errrec := config.Konnekt_rec()

	// waitGroup.Add(1)

	if errara == nil {
		_modelsara := models.ModelGetData{DB:dbara}
		go func() {
			// defer waitGroup.Done()
			Data, err := _modelsara.GetOS(doc, os)

			IsiData <- Data
			errchan <- err
		}()
	}

	// fmt.Println( <-IsiData )
	// fmt.Println( <-errchan)

	// if <-errchan != sql.ErrNoRows {
	// 	var Response _struct.ResponseData
	// 	Response.Status = http.StatusOK
	// 	Response.Message = "Sukses"
	// 	Response.Data = <-IsiData
	// 	restponWithJson(w, http.StatusOK, Response)
	// }


	// var Response _struct.ResponseData

	// // record not found
	// if errcount == 5 {
	// 	Response.Status = http.StatusInternalServerError
	// 	Response.Message = "OS Not Found"
	// 	Response.Data = nil
	// 	restponWithJson(w, http.StatusInternalServerError, Response)
	// } else {
	// 	Response.Status = http.StatusOK
	// 	Response.Message = "Sukses"
	// 	Response.Data = IsiData
	// 	restponWithJson(w, http.StatusOK, Response)
	// }







	// var Response _struct.ResponseData

	// if err != nil {
	// 	Response.Status = http.StatusInternalServerError
	// 	Response.Message = err.Error()
	// 	Response.Data = nil
	// 	restponWithJson(w, http.StatusInternalServerError, Response)
	// }  else {
	// 	_models := models.ModelGetData{DB:db}
	// 	IsiData, err2 := _models.GetOS(doc, os)
	// 	if err2 != nil {
	// 		Response.Status = http.StatusInternalServerError
	// 		Response.Message = err2.Error()
	// 		Response.Data = nil
	// 		restponWithJson(w, http.StatusInternalServerError, Response)

	// 	} else {
	// 		Response.Status = http.StatusOK
	// 		Response.Message = "Sukses"
	// 		Response.Data = IsiData
	// 		restponWithJson(w, http.StatusOK, Response)

	// 	}
	// }

}

func restponWithJson(w http.ResponseWriter, code int, payload interface{}) {
	response, _ := json.Marshal(payload)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	w.Write(response)
}